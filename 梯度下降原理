
# coding: utf-8

# In[1]:


#导入文件
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt
import math
from mpl_toolkits.mplot3d import Axes3D


# In[2]:


#处理中文显示问题
mpl.rcParams['font.sans-serif'] = [u'SimHei']
mpl.rcParams['axes.unicode_minus'] = False


# In[14]:


# #定义X,Y
# def f1(x):
#     return 0.5*(x-0.25)**2

# X=np.arange(-4,4.5,0.05)
# Y=np.array([f1(i) for i in X])


# In[15]:


# #画x,y图像
# plt.figure()
# plt.plot(X,Y,'r-',linewidth=2)
# plt.title("函数y=0.5*(x-0.25)**2")
# plt.show()


# In[16]:


# #二维原始图像
# def f2(x,y):
#     return 0.6*(x+y)**2-x*y

# X1=np.arange(-4,4.5,0.2)
# X2=np.arange(-4,4.5,0.2)
# X1,X2=np.meshgrid(X1,X2)
# Y=np.array([f2(t[0],t[1]) for t in zip(X1.flatten(),X2.flatten())])
# # Y=np.array(list(map(lambda t: f2(t[0],t[1]),zip(X1.flatten(),X2.flatten()))))
# # Y = np.array(list(map(lambda t: f2(t[0], t[1]), zip(X1.flatten(), X2.flatten()))))
# Y.shape=X1.shape
# # print(Y.shape)


# In[17]:


# #画图
# fig=plt.figure()
# ax=Axes3D(fig)
# ax.plot_surface(X1,X2,Y,rstride=1,cstride=1,cmap=plt.cm.jet)
# plt.show()


# In[19]:


# 一维原始图像
def f1(x):
    return 0.5 * (x - 0.25) ** 2
# 导函数
def h1(x):
    return 0.5 * 2 * (x - 0.25)


# In[22]:


GD_X=[]
GD_Y=[]
x=4
alpha=0.5
f_change=f1(x)
f_current=f_change
GD_X.append(x)
GD_Y.append(f_current)
iter_num=0
while f_change>1e-10 and iter_num <100:
    iter_num+=1
    x=x-alpha*h1(x)
    tmp=f1(x)
    f_change=np.abs(f_current-tmp)
    f_current=tmp
    GD_X.append(x)
    GD_Y.append(f_current)

print("最终结果为x={0},y={1}".format(x,f_current))
print("迭代次数为{0}".format(iter_num))
print(GD_Y)


# In[26]:


#构建数据
X=np.arange(-4,4.5,0.05)
Y=np.array([f1(t) for t in X])


# In[28]:


#画图
plt.figure()
plt.plot(X,Y,'r-',linewidth=2)
plt.plot(GD_X,GD_Y,'bo--',linewidth=2)
plt.title('函数：y=0.5*(x-0.25)^2 的梯度下降')
plt.show()


# In[34]:


# 二维原始图像
def f2(x, y):
    return 0.6 * (x + y) ** 2 - x * y
# 导函数
def hx2(x, y):
    return 0.6 * 2 * (x + y) - y
def hy2(x, y):
    return 0.6 * 2 * (x + y) - x


# In[35]:


#使用梯度下降法求解
GD_X1=[]
GD_X2=[]
GD_Y=[]
x1=4
x2=4
alpha=0.5
f_change=f2(x1,x2)
f_current=f_change
GD_X1.append(x1)
GD_X2.append(x2)
GD_Y.append(f_current)
iter_num=0


# In[36]:


while f_change>1e-10 and iter_num<100:
    iter_num+=1
    prex1=x1
    prex2=x2
    x1=x1-alpha*hx2(prex1,prex2)
    x2=x2-alpha*hy2(prex1,prex2)
    
    
    temp=f2(x1,x2)
    f_change=np.abs(f_current-tmp)
    f_current=tmp
    GD_X1.append(x1)
    GD_X2.append(x2)
    GD_Y.append(f_current)


print("最终的结果为:x={0},y={1},z={2}".format(x1,x2,f_current))
print("迭代次数{0}".format(iter_num))


# In[37]:


#构建数据
X1=np.arange(-4,4.5,0.2)
X2=np.arange(-4,4.5,0.2)
X1,X2=np.meshgrid(X1,X2)
Y=np.array([f2(t[0],t[1]) for t in zip(X1.flatten(),X2.flatten())])
Y.shape=X1.shape


# In[39]:


fig=plt.figure(facecolor='w')
ax=Axes3D(fig)
ax.plot_surface(X1,X2,Y,cmap=plt.cm.jet)
ax.plot(GD_X1,GD_X2,GD_Y,'bo--')
ax.set_title("函数:y=0.6 * (θ1 + θ2)^2 - θ1 * θ2的梯度下降")
plt.show()

